{"version":3,"sources":["Timer.js","App.js","serviceWorker.js","index.js"],"names":["Timer","props","state","clock","ticktock","bind","this","timer","setInterval","setState","Date","start","time","Math","round","className","Component","particleOptions","App","params","now","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2NAkCeA,E,YAtBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KAEDC,MAAQ,CACXC,MAAO,GAET,EAAKC,SAAW,EAAKA,SAASC,KAAd,gBANC,E,iFAPjBC,KAAKC,MAAQC,YAAYF,KAAKF,SAAU,O,iCAIxCE,KAAKG,SAAS,CAAEN,MAAO,IAAIO,KAASJ,KAAKL,MAAMU,Y,8CAa/C,IAAIC,EAAOC,KAAKC,MAAMR,KAAKJ,MAAMC,MAAQ,KACzC,OACE,yBAAKY,UAAU,SACb,wBAAIA,UAAU,SAAd,mBACA,8BAAOH,GACP,6BACA,wBAAIG,UAAU,SAAd,gB,GAzBYC,aCEdC,EAAkB,CACtB,UAAa,CACb,OAAU,CACV,MAAS,GACT,QAAW,CACX,QAAU,EACV,WAAc,MAGd,MAAS,CACT,KAAQ,WACR,OAAU,CACV,MAAS,EACT,MAAS,WAET,QAAW,CACX,SAAY,IAGZ,KAAQ,CACR,MAAS,GACT,QAAU,EACV,KAAQ,CACR,QAAU,EACV,MAAS,IACT,SAAY,GACZ,MAAQ,KAKR,cAAiB,CACjB,UAAa,SACb,OAAU,CACV,QAAW,CACX,QAAU,EACV,KAAQ,WAER,QAAU,GAEV,MAAS,CACT,KAAQ,CACR,SAAY,IACZ,YAAe,CACf,QAAW,MAGX,OAAU,CACV,SAAY,IACZ,KAAQ,EACR,SAAY,EACZ,QAAW,EACX,MAAS,GAET,QAAW,CACX,SAAY,IACZ,SAAY,IAEZ,KAAQ,CACR,aAAgB,GAEhB,OAAU,CACV,aAAgB,MAgBHC,MAVf,WACE,OACE,yBAAKH,UAAU,OACb,kBAAC,IAAD,CAAWA,UAAU,YACPI,OAAQF,IACxB,kBAAC,EAAD,CAAON,MAAOD,KAAKU,UClEHC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.2e02e76f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\n\r\nclass Timer extends Component {\r\n  componentDidMount() {\r\n    this.timer = setInterval(this.ticktock, 1000);\r\n  }\r\n\r\n  ticktock() {\r\n    this.setState({ clock: new Date() - this.props.start });\r\n  }\r\n\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      clock: 0,\r\n    };\r\n    this.ticktock = this.ticktock.bind(this);\r\n  }\r\n\r\n  render() {\r\n    var time = Math.round(this.state.clock / 1000);\r\n    return (\r\n      <div className=\"Timer\">\r\n        <h1 className=\"upper\">You wasted your</h1>\r\n        <span>{time}</span>\r\n        <br />\r\n        <h1 className=\"lower\">Seconds</h1>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Timer;\r\n","import React from 'react';\nimport './App.css';\nimport Particles from 'react-particles-js';\nimport Timer from './Timer';\n\nconst particleOptions = {\n  \"particles\": {\n  \"number\": {\n  \"value\": 80,\n  \"density\": {\n  \"enable\": true,\n  \"value_area\": 800\n  }\n  },\n  \"shape\": {\n  \"type\": \"triangle\",\n  \"stroke\": {\n  \"width\": 0,\n  \"color\": \"#000000\"\n  },\n  \"polygon\": {\n  \"nb_sides\": 5\n  }\n  },\n  \"size\": {\n  \"value\": 10,\n  \"random\": true,\n  \"anim\": {\n  \"enable\": true,\n  \"speed\": 800,\n  \"size_min\": 0.1,\n  \"sync\": false\n  }\n  },\n  \n  },\n  \"interactivity\": {\n  \"detect_on\": \"canvas\",\n  \"events\": {\n  \"onhover\": {\n  \"enable\": true,\n  \"mode\": \"repulse\"\n  },\n  \"resize\": true\n  },\n  \"modes\": {\n  \"grab\": {\n  \"distance\": 400,\n  \"line_linked\": {\n  \"opacity\": 100\n  }\n  },\n  \"bubble\": {\n  \"distance\": 400,\n  \"size\": 1,\n  \"duration\": 2,\n  \"opacity\": 1,\n  \"speed\": 3\n  },\n  \"repulse\": {\n  \"distance\": 400,\n  \"duration\": 0.4\n  },\n  \"push\": {\n  \"particles_nb\": 4\n  },\n  \"remove\": {\n  \"particles_nb\": 2\n  }\n  }\n  },\n  }\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Particles className=\"particles\"\n                    params={particleOptions} />\n    <Timer start={Date.now()}/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}